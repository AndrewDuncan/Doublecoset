When testing amalgamate is finished I think the next thing to do is to
sort out generators vs basis elements of H. We talked about it before,
but there is still something to be done.

The first step is the following.

Write a function (to add to alg1) which interacts with the user as follows.
1. Ask the user to input generators for a subgroup H in a format that can be
input to the subgroup function of alg1. That is "Hname, Hgens" (Hgens  is a list of  words in an alphabet. It's probably
ok not to worry about which alphabet is used at this point). Also, there is no need yet for the third argument of subgroup as we shall
generate this automatically.

2. Set up the "Z" basis:
FZ=free_group(len(subgp_gens),"z")
(I want as many "z"'s as there are generators of H. I'm not sure if I've got the syntax correct.)

3. Run
H=subgroup(Hname,Hgens,FZ.gens)

4. Do the Stallings folding of H and then compute a basis for H: that is
run

H.stallings()
flower=H.flower
T=bfs(flower,)
T.forest()
H.subgroup_free_gens=subgroup_basis(flower)[0] (this returns basis in list format)

5. If there are more elements in Hgens than in the basis computed, tell the user, and ask the user to
do something about it. That is (something like):

if len(Hgens)>len(H.subgroup_free_gens)
output a message reporting this fact,
list both Hgens and the free_gens found
tell the user to input len(H.subgroup_free_gens) generators for H.

6. If, in step 5, the number of elements of Hgens and H.subgroup_free_gens are the same:
output a message listing
Hgens,
Hsubgroup_free_gens and the letter zi to which each is paired
and
ask the  user to confirm that this is ok, before continuing.


Can you take a copy of alg1 and add a function like this to a new version?

Later, we shall need something to check that the way that two subgroups
are matched up is what is intended, but that can wait for now. 