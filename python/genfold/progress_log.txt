Current versions: 
K_fix.py
(K.py corresponds to the orignal words in the paper, K_fix attempts
to get nearer the diagrams in the paper.)
directory input_K_checked has output up to Mod 3 as it should be: for comparison after future changes
(dir input_K receives output from K_fix.py and K.py)

alg3_cex.py - the example with 2 identical normal subgroups amalgamated.
cex_checked directory has output up to Mod 3 as it should be: for comparison after future changes
(dir cex receives output from alg3_cex.py)

Outputs:
To standard output: prints "Now Di" each time modification i is carried out.

Files: 
Path names for logfile and testfile are set in K_fix.py or alg3_cex.py and contain the following.
logfile: tmp.txt --- printed output goverened by the verbose flags (in K_fix.py or ...) - can be made to say which paths are added by each modification.

testfile (a directory):
stallings1.gv and stallings2.gv --- stallings foldings of H1 and H2
double1.gv and double2.gv --- doubles of these foldings
Kfolding.gv --- initial (free) folding of generators of K
For the jth iteration of the main loop:
D0_Z_vj.gv --- Z component of Delta at iteration j
Di_k_vj.gv --- the result of modification i, on the X_k component of Delta, at iteration j
Dn_vj.gv --- the new Delta, produced by iteration j of the main loop
P_i_k_vj --- the product of Di_k_vj.gv with stallingsk.gv 

(There's a file display.sh which can help with displaying the output graphs, but it 
works in linux; and needs to be in the same directory as the files to be displayed.)

26/10/13
Ran the program on the example in our paper (as far as Mod 3).

One thing had to be changed.
Namely, when making X_1 and X_2 components, right at the start,
if there is a component that turns out to have only edges of type Z,
then it has to be removed. I added this to the appropriate part of the
algorithm. (In the more or less  certain knowledge that in fact the
algorithm will have to be changed a bit and then this won't be
necessary.) 

The Z edges removed must all belong to and X_k' component, so don't need
to be added to delta_Z.

27/10/13
Checked output of K_fix.py against the graphs in the paper (as far as Modification 3). 
All agree (modulo the necessary differences caused by mistakes in the paper).

Checked output of alg3_cex.py as far as Mod 3. Agrees with hand calculations made in Moscow.

First attempt at mod 4; runs but outputs rubbish.

10/11/13
Mod 4 running ok on example in paper.

17/11/13
Added log file to take output from test run

19/11/13
Mod 5 added. Not tested. Delta_Z does not look right.

21/11/13
Mod 5 working ok. Delta_Z fixed and working ok.


==================================================================================
Notes
The proof that the algorithm works starts with the claim that a word w, which is
to be tested to see if it represents an element of K, can be written in terms
of X1 and X2 alone. However, we have not allowed for this in the algorithm, 
as we have only added Xk words to the Xk components. This means that if there
are edges in Delta_Z which are not in either an X1 or an X2 component, then
these edges cannot be read as X1 or X2 words. 
Possibly this does not matter, as, if w belongs to K then it is equal in G to 
a word formed from a product of generators of K, written in dc normal form: 
so it is this kind of word we need to cope with. It would then be possible
to read such a word in the flower automaton for K. However, the algorithm
for putting words in normal form would have to be changed to accommodate
this.

The criteria used to halt the main loop seem suspect. 
The idea is to make modifications that allow words readable in the flower
automaton of K to be put into normal form. Paths are found which need to
have nf analogues added. However, the process of putting words into normal
form may go through several iterations -- reducing 3 (or 2) syllables to 
1 syllable, then rewriting the word, then starting again. To allow
the starting again bit we need to regard paths added at the first pass 
through the loop as "original" paths in the second pass through the loop.
Therefore it may not be enough to continue till the number of X_1 and X_2
components of Delta_5 is no fewer than the number for Delta. What we should
ask is if any edges were added to form Delta_5 from Delta. If so then we
should repeat. The process should stop when the number of edges of Delta 
and Delta_5 are the same. (This is an unprocessed notion, not something thought
through carefully.)
